#+TITLE: Emacs configuration

# Shamelessly inspired by hrs: https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org
# https://github.com/magnars/.emacs.d/
# https://github.com/technomancy/better-defaults
# https://github.com/purcell/emacs.d
# https://github.com/abo-abo/oremacs
# https://github.com/munen/emacs.d

* Dependency management


** Use package configuration
# #+BEGIN_SRC emacs-lisp

# (unless (package-installed-p 'use-package)
#   (package-install 'use-package))
# (require 'use-package)
# (use-package auto-compile
#   :config (auto-compile-on-load-mode))


# (prefer-coding-system 'utf-8)
# (set-language-environment "UTF-8")
# #+END_SRC

** package archives
#+BEGIN_SRC emacs-lisp
  ;; MELPA
  ;;     (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
  ;;                         (not (gnutls-available-p))))
  ;;            (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
  ;;       (add-to-list 'package-archives (cons "melpa" url) t))
  ;;     (when (< emacs-major-version 24)
  ;;       ;; For important compatibility libraries like cl-lib
  ;;       (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org"   . "http://orgmode.org/elpa/")))
  ;; MELPA slut
  ;;     (add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/"))
#+END_SRC

** Required packages

#+BEGIN_SRC emacs-lisp
  (defvar local-packages 
    '(auto-complete 
      elpy 
      flycheck 
      jedi 
      magit 
      projectile 
      epc
      diff-hl 
      latex-pretty-symbols 
      poet-theme 
      pretty-symbols 
      rainbow-delimiters
      ac-ispell 
      auctex 
      auto-compile 
      flycheck-pycheckers 
      exec-path-from-shell 
      rainbow-mode ))
#+END_SRC

** Install dependencies

#+BEGIN_SRC emacs-lisp
;;   (defun uninstalled-packages (packages)
;;     (delq nil
;;           (mapcar (lambda (p) (if (package-installed-p p nil) nil p)) packages)))
;;   (let ((need-to-install (uninstalled-packages local-packages)))
;;     (when need-to-install
;;       (progn
;;         (package-refresh-contents)
;;         (dolist (p need-to-install)
;;           (package-install p)))))
(dolist (p local-packages)
  (unless (package-installed-p p)
    (package-refresh-contents)
    (package-install p))
  (add-to-list 'package-selected-packages p))
#+END_SRC

* Configure emacs defaults

** Don't accidentally close everything
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x r q") 'save-buffers-kill-terminal)
  (global-set-key (kbd "C-x C-c") 'delete-frame)
#+END_SRC

** Custom startup file
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice "~/Nextcloud/Documents/dotfiles/emacs/startup.org")
#+END_SRC

** Fix issue with tilde on linux and mac
#+BEGIN_SRC emacs-lisp
  (require 'iso-transl)
#+END_SRC

** Don't clutter .emacs
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
#+END_SRC

** Allow 20MB of memory (instead of 0.76MB) before calling garbage collection.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** When opening files, always follow symlinks 
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Don't assume that sentences should have two spaces after periods.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Disable startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC

** Better search and completion
#+BEGIN_SRC emacs-lisp
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Frederik Aarup Lauridsen"
      user-mail-address "frederik.lauridsen@gmail.com"
      calendar-latitude 56.16
      calendar-longitude 10.20
      calendar-location-name "Aarhus, Denmark")
#+END_SRC

* Add resources to load-path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/libraries/")
#+END_SRC

* Utility functions

** fix path

#+BEGIN_SRC emacs-lisp
  (defun hrs/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))
#+END_SRC

** Use sudo to edit file

#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

** Creating matrices

#+BEGIN_SRC emacs-lisp
  (defun list-of-list-to-matrix (b e)
    (interactive "r")
    (replace-string "[" "" nil b (+ b 3))  
    (replace-string "]" "" nil (- e 4) e)  
    (replace-string " " "" nil b e)
    (replace-string "],[" "\\\\\n" nil b e)
    (replace-string "," " & " nil b e)
    )
#+END_SRC

** Scrolling pdf in other window
#+BEGIN_SRC emacs-lisp
  (defun mrfred-other-doc-view-next-page ()
      (interactive)
    (other-window 1)
    (doc-view-next-page)
    (other-window 1))
  (defun mrfred-other-doc-view-prev-page ()
      (interactive)
    (other-window 1)
    (doc-view-previous-page)
    (other-window 1))
#+END_SRC
** Kattis inserts

#+BEGIN_SRC emacs-lisp
  (defun get_ints ()
    (interactive) 
    (insert "[int(x) for x in input().split()]"))
#+END_SRC

* UI preferences

#+BEGIN_SRC emacs-lisp
  (when window-system
    (scroll-bar-mode -1))
  (add-hook 'text-mode-hook
            (lambda ()
              (variable-pitch-mode 1)))
  (tool-bar-mode 0)
  (menu-bar-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (setq show-paren-when-point-inside-paren t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

Org bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

** Disable bell

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC


** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC


** Programming

*** Better handling of CamelCase words
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

*** Show what is not committed
#+BEGIN_SRC emacs-lisp
(require 'diff-hl)

(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'org-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

*** Lisps
#+BEGIN_SRC emacs-lisp
(setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

(dolist (hook lispy-mode-hooks)
  (add-hook hook (lambda ()
                   (setq show-paren-style 'expression)
                   (rainbow-delimiters-mode))))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
  ;; (elpy-enable)
  ;; (add-hook 'elpy-mode-hook 'flycheck-mode)
  (setq elpy-rpc-python-command "python3")
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

**** Jedi

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            '(lambda ()
               (require 'jedi)
               ;; handpicked from https://github.com/wernerandrew/jedi-starter/blob/master/jedi-starter.el
               (add-to-list 'ac-sources 'ac-source-jedi-direct)

               (add-hook 'python-mode-hook 'jedi:setup)
               (defvar jedi-config:use-system-python t
                 "Will use system python and active environment for Jedi server.
    May be necessary for some GUI environments (e.g., Mac OS X)")
               (defvar jedi-config:vcs-root-sentinel ".git")

               (defvar jedi-config:python-module-sentinel "__init__.py")
               (defun get-project-root-with-file (buf repo-file &optional init-file)
                 "Guesses that the python root is the less 'deep' of either:
                         -- the root directory of the repository, or
                         -- the directory before the first directory after the root
                            having the init-file file (e.g., '__init__.py'."

                 ;; make list of directories from root, removing empty
                 (defun make-dir-list (path)
                   (delq nil (mapcar (lambda (x) (and (not (string= x "")) x))
                                     (split-string path "/"))))
                 ;; convert a list of directories to a path starting at "/"
                 (defun dir-list-to-path (dirs)
                   (mapconcat 'identity (cons "" dirs) "/"))
                 ;; a little something to try to find the "best" root directory
                 (defun try-find-best-root (base-dir buffer-dir current)
                   (cond
                    (base-dir ;; traverse until we reach the base
                     (try-find-best-root (cdr base-dir) (cdr buffer-dir)
                                         (append current (list (car buffer-dir)))))

                    (buffer-dir ;; try until we hit the current directory
                     (let* ((next-dir (append current (list (car buffer-dir))))
                            (file-file (concat (dir-list-to-path next-dir) "/" init-file)))
                       (if (file-exists-p file-file)
                           (dir-list-to-path current)
                         (try-find-best-root nil (cdr buffer-dir) next-dir))))

                    (t nil)))

                 (let* ((buffer-dir (expand-file-name (file-name-directory (buffer-file-name buf))))
                        (vc-root-dir (vc-find-root buffer-dir repo-file)))
                   (if (and init-file vc-root-dir)
                       (try-find-best-root
                        (make-dir-list (expand-file-name vc-root-dir))
                        (make-dir-list buffer-dir)
                        '())
                     vc-root-dir))) ;; default to vc root if init file not given

               ;; Set this variable to find project root
               (defvar jedi-config:find-root-function 'get-project-root-with-file)
               (defun jedi-config:set-python-executable ()
                 (set-exec-path-from-shell-PATH)
                 (make-local-variable 'jedi:server-command)
                 (set 'jedi:server-command
                      (list (executable-find "python") ;; may need help if running from GUI
                            (cadr default-jedi-server-command))))

               (defun current-buffer-project-root ()
                 (funcall jedi-config:find-root-function
                          (current-buffer)
                          jedi-config:vcs-root-sentinel
                          jedi-config:python-module-sentinel))

               (defun jedi-config:setup-server-args ()
                 ;; little helper macro for building the arglist
                 (defmacro add-args (arg-list arg-name arg-value)
                   `(setq ,arg-list (append ,arg-list (list ,arg-name ,arg-value))))
                 ;; and now define the args
                 (let ((project-root (current-buffer-project-root)))

                   (make-local-variable 'jedi:server-args)

                   (when project-root
                     (message (format "Adding system path: %s" project-root))
                     (add-args jedi:server-args "--sys-path" project-root))

                   (when jedi-config:with-virtualenv
                     (message (format "Adding virtualenv: %s" jedi-config:with-virtualenv))
                     (add-args jedi:server-args "--virtual-env" jedi-config:with-virtualenv))))

               (defun jedi-config:set-python-executable ()
                 (set-exec-path-from-shell-PATH)
                 (make-local-variable 'jedi:sernver-command)
                 (set 'jedi:server-command
                      (list (executable-find "python3") ;; may need help if running from GUI
                            (cadr default-jedi-server-command))))

               (add-hook 'python-mode-hook
                         'jedi-config:setup-server-args)
               (when jedi-config:use-system-python
                 (add-hook 'python-mode-hook
                           'jedi-config:set-python-executable))
               ))
#+END_SRC

*** web-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'web-mode-hook
          (lambda ()
            (setq web-mode-markup-indent-offset 2)))
#+END_SRC

Encode some characters
#+BEGIN_SRC emacs-lisp
(defun encode-html (start end)
  "Encodes HTML entities; works great in Visual Mode (START END)."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      (goto-char (point-min))
      (replace-string "&" "&amp;")
      (goto-char (point-min))
      (replace-string "<" "&lt;")
      (goto-char (point-min))
      (replace-string ">" "&gt;"))))
#+END_SRC

*** Terminal

#+BEGIN_SRC emacs-lisp
  (defun hrs/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (setq yas-dont-activate t)))
#+END_SRC

* Working in emacs

** Setting the ls arguments for dired
#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-lhvA")
#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** Add new lines when going down
#+BEGIN_SRC emacs-lisp
  (setq next-line-add-newlines t)
#+END_SRC

** Set $MANPATH, $PATH and exec-path from shell even when started from GUI helpers like dmenu or Spotlight

#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-initialize)
#+END_SRC


** Closing buffers
Kill all buffers except the current one
#+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

=dired= will create buffers for every visited folder. This is a helper
to clear them out once you're done working with those folders.

#+BEGIN_SRC emacs-lisp

  (defun kill-dired-buffers ()
    "Kill all open dired buffers."
    (interactive)
    (mapc (lambda (buffer)
            (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
              (kill-buffer buffer)))
          (buffer-list)))
#+END_SRC

* Org mode

** Spell checking

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
  (setq flyspell-sort-corrections nil)
  (setq flyspell-issue-message-flag nil)
  (setq ispell-program-name "/usr/local/bin/aspell")
#+END_SRC



** Open org links
#+BEGIN_SRC emacs-lisp
  (defun org-force-open-current-window ()
    (interactive)
    (let ((org-link-frame-setup (quote
                                 ((vm . vm-visit-folder)
                                  (vm-imap . vm-visit-imap-folder)
                                  (gnus . gnus)
                                  (file . find-file)
                                  (wl . wl)))
                                ))
      (org-open-at-point)))
  ;; Depending on universal argument try opening link
  (defun org-open-maybe (&optional arg)
    (interactive "P")
    (if arg
        (org-open-at-point)
      (org-force-open-current-window)
      )
    )
  ;; Redefine file opening without clobbering universal argumnet
  (define-key org-mode-map "\C-c\C-o" 'org-open-maybe)
#+END_SRC

** What to open in emacs from org
#+BEGIN_SRC emacs-lisp
    ;; (setq org-file-apps '((auto-mode . emacs)
    ;;                       ("\\.mm\\'" . default)
    ;;                       ("\\.x?html?\\'" . default)
    ;;                       ("\\.pdf\\'" . emacs)
    ;;                      (directory . emacs)))
  (add-to-list 'org-file-apps '(auto-mode . emacs))
  (add-to-list 'org-file-apps '("\\.mm\\'" . default))
  (add-to-list 'org-file-apps '("\\.x?html?\\'" . default))
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
  (add-to-list 'org-file-apps '(directory . emacs))
      ;;  (setq org-file-apps '((directory . emacs)))
#+END_SRC

** Various hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode 'list-of-list-to-matrix())
  (add-hook 'doc-view-mode-hook (lambda () (auto-revert-mode 1)))
  (add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))
#+END_SRC

** Better look of latex previews
#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2))
#+END_SRC


** Scroll pdf when taking notes
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () (local-set-key (kbd "C-M-v") 'mrfred-other-doc-view-next-page)))
  (add-hook 'org-mode-hook
            (lambda () (local-set-key (kbd "C-M-S-v") 'mrfred-other-doc-view-prev-page)))
#+END_SRC

** Run python code in org-mode

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
(setq org-babel-python-command "python3")
#+END_SRC

** Agenda/todo

#+BEGIN_SRC emacs-lisp
;; set key for agenda
(global-set-key (kbd "C-c a") 'org-agenda)

;;file to save todo items
(setq org-agenda-files (quote ("~/Dropbox/dotfiles/emacs/todo.org")))

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;;set colours for priorities
(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))

;;open agenda in current window
(setq org-agenda-window-setup (quote current-window))

;;capture todo items using C-c c t
(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/Dropbox/dotfiles/emacs/todo.org" "Tasks")
         "* TODO [#A] %?")))
#+END_SRC

** Syntax highlighting in source blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

** Tab acts correctly in source blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC

** Dont ask to evaluate code
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

* Editing settings

** Append to path
#+BEGIN_SRC emacs-lisp
(hrs/append-to-path "/usr/local/bin")
(hrs/append-to-path "~/.local/bin/")
(hrs/append-to-path "~/.local/bin/")
(hrs/append-to-path "/Library/TeX/texbin/")
#+END_SRC

** Auto complete

#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)
  (ac-config-default)
  ;; (setq ac-auto-show-menu (* ac-delay 2))
  (setq ac-show-menu-immediately-on-auto-complete t)
#+END_SRC

** Setting environment, primarily for postgresql
#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_CTYPE" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
#+END_SRC

** Things that should be cleaned up
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (icomplete-mode 99)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
  (global-linum-mode 0)
  (setq linum-format "%d ")
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
  (add-hook 'prog-mode-hook 
            (lambda ()
              ))
#+END_SRC

** display colors
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-mode)
#+END_SRC

* Key binds

** Stuff to be cleaned up

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<down>") (kbd "C-u 3 C-v"))
  (global-set-key (kbd "<up>") (kbd "C-u 3 M-v"))
  (global-set-key (kbd "M-_") 'comment-or-uncomment-region)
  (global-set-key (kbd "C-c m") 'magit-status)
  (defun fal/visit-emacs-config ()
    (interactive)
    (find-file "~/Nextcloud/Documents/dotfiles/emacs/configuration.org"))

  (global-set-key (kbd "C-c e") 'fal/visit-emacs-config)
  (setq ns-right-option-modifier nil)
  ;;(define-key key-translation-map [(meta ?8)] [?\[])
  ;;(define-key key-translation-map [(meta ?9)] [?\]])
#+END_SRC

Jedi 

#+BEGIN_SRC emacs-lisp
  (defun jedi-config:setup-keys ()
        (local-set-key (kbd "M-.") 'jedi:goto-definition)
        (local-set-key (kbd "M-,") 'jedi:goto-definition-pop-marker)
        (local-set-key (kbd "M-?") 'jedi:show-doc)
        (local-set-key (kbd "M--") 'jedi:get-in-function-call))
  (setq jedi:complete-on-dot t)
  (add-hook 'python-mode-hook 'jedi-config:setup-keys)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

* Dependencies
- rainbow-delimiters
- paredit
- flycheck
  - flycheck-pyheck
- elpy 
  - rope
  - jedi
  - flake8
  - autopep8
  - yapf
- use-package
- diff-hl



* Enable advanced features

Command for lowercase
#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
#+END_SRC

* Variables and themes

#+BEGIN_SRC emacs-lisp
  (load-theme 'poet t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  ;; (eval-after-load "LaTeX")
  ;;#+attr_latex: :mode math :environment pmatrix
  ;;|               1 |        2 |
  ;;|               3 |        4 |
  ;;| \alpha + \sum_1 | p_k+2(2) |

#+END_SRC


